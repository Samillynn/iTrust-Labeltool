
#TODO
1. possible to make graph_handler global to reduce passing of args
2. make options easily configurable

3. carry options
4. choose from a list to add connections
5. highlight connected

#TODO
window, <- Component?
Component = {extend_layout

two layer?

symmetric/asymmetric of process data returned by window.read()

add something to layout,
process something when layout returned

add/remove connections

may add multiple connections (should we open the window again?)

may remove multiple ones

def edit_connection() -> [sg.*]

init process to determine the layout -> dynamic layout by multiple processors

call setup_edit_connections in init
setup-edit-connection add_handler

#TODO after zoom in/out, find similar does not work properly

Make EventHandler protocol
make EventChain an EventHandler
make graph_Handler inheritate EC

make graph resizable
------------------------
1. extend=True
2. bind event +RESIZE
3. register event -> graph_handler.resize_handler
4. code resize_handler:
    1. set_size (keep ratio, centered)
    2. erase everything
    ?3. redraw image (scaled) -> modify render
    ?3. refactor to redraw image?
    4. redraw labels

CursorState
    __init__
    hover(x, y) -> switch(x, y) -> diff state(context)
    mouse_down
    mouse_up
    - drag
    - click
    - stop_drag
    - cursor_shape
    - begin_state

state = state.hover()

things need to refactor:
done 1. move storage out from graph_handler, make a storage class, let GH depends only on image_path and labels
done 2. make Label a class, instead of a dictionary
done 3. decouple the mouse movement logic, make a separate class for mouse logic
done 4. decouple the drag action logic
done 5. decouple nearby/inside/neither logic (mouse hover)
6. deal with keyboard states
done 7. decouple graph view with graph controller
(all events goes into GC, GC data reflects to GV)
8. decouple query dialogs from data processing

requirements - select data frame
- able to select
- add color when hover
- add window to remind it is in select mode

databox:
view revert to no nested draw
storage modify

find similar:
view, algorithm

1. get selected view port by position of label -> CoordinateTransfer
2. find similar using current image and view port
3. get similar locations by algo
4. draw rectangles -> need to convert size to ratio

Add undo-redo feature:
new command: move everything from current node and append new node
undo -> index --
redo -> index ++
undo from first -> nothing
redo in last -> nothing
